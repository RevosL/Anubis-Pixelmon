# Configuration file

##########################################################################################################
# lang
#--------------------------------------------------------------------------------------------------------#
# Language configuration
##########################################################################################################

lang {
    #  [default: &cYou can't see the leaderboard during the event ! ]
    S:cantseeleaderboard=&cYou can't see the leaderboard during the event ! 

    #  [default: &cYou don't have point yet !]
    S:command.pe.noscore=&cYou don't have point yet !

    # Key {score} for player point [default: &aYou have &e{score} &apoint(s).]
    S:command.pe.score=&aYou have &e{score} &apoint(s).

    #  [default: PixelEvent - Time left : {mtimeleft} minute(s) and {stimeleft} second(s)]
    S:event.bossbar=PixelEvent - Time left : {mtimeleft} minute(s) and {stimeleft} second(s)

    # Key {level} for amount of point player need to exceed [default: &aYou get the reward of the level {level}!]
    S:event.levelreward=&aYou get the reward of the level {level}!

    #  [default: &cYou don't meet the requirements to get a point for this event, check /pe info!]
    S:event.nomatch=&cYou don't meet the requirements to get a point for this event, check /pe info!

    #  [default: &cYou can't participate to the event in this area !]
    S:event.nothere=&cYou can't participate to the event in this area !

    #  [default: &aYou win 1 point with PixelEvent ! Do /pe info for more information !]
    S:event.success=&aYou win 1 point with PixelEvent ! Do /pe info for more information !

    #  [default: &eAn event has started, /pe info!]
    S:eventstarted=&eAn event has started, /pe info!

    #  [default: &cThe event has been stopped!]
    S:eventstopped=&cThe event has been stopped!

    #  [default: &aEvent ended, a player reach the goal!]
    S:eventstoppedgoal=&aEvent ended, a player reach the goal!

    #  [default: &aEvent ended, time over!]
    S:eventstoppedtime=&aEvent ended, time over!

    # Prefix [default: &d[PixelEvent] ]
    S:prefix=&d[PixelEvent] 

    #  [default: &cWrong command]
    S:wrongcmd=&cWrong command
}


##########################################################################################################
# langadmin
#--------------------------------------------------------------------------------------------------------#
# Language configuration
##########################################################################################################

langadmin {
    #  [default: &cThis claim is already in the blacklist!]
    S:alreadyinblacklist=&cThis claim is already in the blacklist!

    #  [default: &cAlready in the list]
    S:alreadyinlist=&cAlready in the list

    #  [default: &cThis claim is already in the whitelist!]
    S:alreadyinwhitelist=&cThis claim is already in the whitelist!

    #  [default: &eCheck the wiki with the following link :]
    S:checkwiki=&eCheck the wiki with the following link :

    #  [default: &aClaim added to the blacklist]
    S:claimaddb=&aClaim added to the blacklist

    #  [default: &aClaim added to the whitelist]
    S:claimaddw=&aClaim added to the whitelist

    #  [default: &aClaim removed from the blacklist]
    S:claimdelb=&aClaim removed from the blacklist

    #  [default: &aClaim removed from the whitelist]
    S:claimdelw=&aClaim removed from the whitelist

    #  [default: &cNot a claim]
    S:notclaim=&cNot a claim

    #  [default: &cNot in the list]
    S:notinlist=&cNot in the list

    #  [default: &cNot a valid pokemon]
    S:pokemonerror=&cNot a valid pokemon

    #  [default: &aConfig random set, do /pe info!]
    S:randomset=&aConfig random set, do /pe info!

    #  [default: &aPixelEvent's config/lang reloaded!]
    S:reload=&aPixelEvent's config/lang reloaded!

    # Key {choice} [default: &aPokemon for the event set to &e{choice}]
    S:setpokemon=&aPokemon for the event set to &e{choice}
}


##########################################################################################################
# langgui
#--------------------------------------------------------------------------------------------------------#
# Language GUI configuration
##########################################################################################################

langgui {
    #  [default: &aBack]
    S:back=&aBack

    #  [default: &aNo ball restriction]
    S:ball=&aNo ball restriction

    #  [default: &cBalls not allowed]
    S:ballblacklist=&cBalls not allowed

    #  [default: &eBlacklisted]
    S:ballblacklisted=&eBlacklisted

    #  [default: &cBall forbidden to use during the event]
    S:ballblacklistinfo=&cBall forbidden to use during the event

    #  [default: &cConfig Ball]
    S:ballmenuname=&cConfig Ball

    #  [default: &aNot in the config]
    S:ballnotinconfig=&aNot in the config

    #  [default: &cBalls must be used]
    S:ballwhitelist=&cBalls must be used

    #  [default: &eWhitelisted]
    S:ballwhitelisted=&eWhitelisted

    #  [default: &aBall to use during the event]
    S:ballwhitelistinfo=&aBall to use during the event

    #  [default: &cBossbar is DISABLE]
    S:bossbardisable=&cBossbar is DISABLE

    #  [default: &aBossbar is ENABLE]
    S:bossbarenable=&aBossbar is ENABLE

    #  [default: &aBossbar]
    S:bossbarname=&aBossbar

    #  [default: &cCan't validate the config. The blacklist and the whitelist size are both greater than 1]
    S:cantvalidate=&cCan't validate the config. The blacklist and the whitelist size are both greater than 1

    #  [default: &eCapture]
    S:capture=&eCapture

    #  [default: &aClaims are ALLOWED]
    S:claimallowed=&aClaims are ALLOWED

    #  [default: &cClaims are DENIED]
    S:claimdenied=&cClaims are DENIED

    #  [default: Claims]
    S:claims=Claims

    #  [default: &aClear blacklist claim]
    S:clearblacklist=&aClear blacklist claim

    #  [default: &aClear whitelist claim]
    S:clearwhitelist=&aClear whitelist claim

    #  [default: &aClose]
    S:close=&aClose

    #  [default: &aClose]
    S:closemenu=&aClose

    #  [default: &cConfig Event]
    S:eventmenuname=&cConfig Event

    #  [default: &cThis event is not selected]
    S:eventnotselected=&cThis event is not selected

    #  [default: &aThis event is selected]
    S:eventselected=&aThis event is selected

    #  [default: &eKill]
    S:kill=&eKill

    #  [default: &aLeaderboard during the event]
    S:leaderboard=&aLeaderboard during the event

    #  [default: &aLeaderboard is ALLOWED]
    S:leaderboardallowed=&aLeaderboard is ALLOWED

    #  [default: &cLeaderboard is DENIED]
    S:leaderboarddenied=&cLeaderboard is DENIED

    #  [default: &eClick to see it]
    S:loreblacklist=&eClick to see it

    #  [default: &aNo restriction]
    S:lorepokemonall=&aNo restriction

    #  [default: &6{pokemon} &eonly is allowed!]
    S:lorepokemonallowed=&6{pokemon} &eonly is allowed!

    #  [default: &cConfig Other]
    S:othermenuname=&cConfig Other

    #  [default: &eFirst player to &6{goal} &epoints before the end of the event]
    S:pointsgoal=&eFirst player to &6{goal} &epoints before the end of the event

    #  [default: &aPokemon]
    S:pokemon=&aPokemon

    #  [default: &eReset the config]
    S:resetconfig=&eReset the config

    #  [default: &cInformations]
    S:resumemenuname=&cInformations

    #  [default: &aActually &6{claimlistsize} &ablacklised claim(s).]
    S:sizeblacklistclaim=&aActually &6{claimlistsize} &ablacklised claim(s).

    #  [default: &aActually &6{claimlistsize} &awhitelised claim(s).]
    S:sizewhitelistclaim=&aActually &6{claimlistsize} &awhitelised claim(s).

    #  [default: &6Timer]
    S:time=&6Timer

    #  [default: &aActual value : &b {minutes} minutes &6Click here to validate!]
    S:timeractualvalue=&aActual value : &b {minutes} minutes &6Click here to validate!

    #  [default: &6Time remaining :]
    S:timeremaining=&6Time remaining :

    #  [default: &eGet the best score to be on the leaderboard!]
    S:timergoal=&eGet the best score to be on the leaderboard!

    #  [default: Time : &b{minutes}]
    S:timerifnotrun=Time : &b{minutes}

    #  [default: &b{minutes} minutes and {seconds} seconds.]
    S:timerifrun=&b{minutes} minutes and {seconds} seconds.

    #  [default: &cConfig Timer]
    S:timermenuname=&cConfig Timer

    #  [default: &aClick to &cDENY]
    S:toggleallowed=&aClick to &cDENY

    #  [default: &cClick to &aALLOW]
    S:toggledeny=&cClick to &aALLOW

    #  [default: &cClick to &aENABLE]
    S:toggledisable=&cClick to &aENABLE

    #  [default: &aClick to &cDISABLE]
    S:toggleenable=&aClick to &cDISABLE

    #  [default: &aNo type restriction]
    S:type=&aNo type restriction

    #  [default: &cTypes not allowed]
    S:typeblacklist=&cTypes not allowed

    #  [default: &eBlacklisted]
    S:typeblacklisted=&eBlacklisted

    #  [default: &cType you can't kill/capture during the event]
    S:typeblacklistinfo=&cType you can't kill/capture during the event

    #  [default: &cConfig Type]
    S:typemenuname=&cConfig Type

    #  [default: &aNot in the config]
    S:typenotinconfig=&aNot in the config

    #  [default: &cTypes must be captured/killed]
    S:typewhitelist=&cTypes must be captured/killed

    #  [default: &eWhitelisted]
    S:typewhitelisted=&eWhitelisted

    #  [default: &aType you need to kill/capture during the event]
    S:typewhitelistinfo=&aType you need to kill/capture during the event

    #  [default: &aValidate]
    S:validate=&aValidate

    #  [default: &aWilderness]
    S:wilderness=&aWilderness

    #  [default: &aWilderness is ALLOWED]
    S:wildernessallowed=&aWilderness is ALLOWED

    #  [default: &cWilderness is DENIED]
    S:wildernessdenied=&cWilderness is DENIED
}


